---
title: Mise en production des projets de data science
subtitle: |
    [Cours de 3e ann√©e √† l'ENSAE (S√©ances #2 et #3)]{.blue2}<br>
    2024/2025
author:
    - Romain Avouac
    - Lino Galiana
# date:
slide-number: true
footer: |
  Bonnes pratiques pour la mise en production des projets de data science ([retour _homepage_](https://ensae-reproductibilite.github.io/)) [{{< fa brands github >}}](https://github.com/ensae-reproductibilite/)
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
  #onyxia-dark-revealjs:
    incremental: true
    output-file: index.html
controls: true
css: custom.css
from: markdown+emoji
---

## Rappels s√©ance #1

<br><br>
_Retrouver les slides pr√©c√©dentes sur [ensae-reproductibilite.github.io/slides/](https://ensae-reproductibilite.github.io/slides/)_

## Rappels s√©ance #1 {.nonincremental .smaller}

* Sortir des _notebooks_ pour [__r√©duire le co√ªt du passage de l'exp√©rimentation √† la production__]{.orange}
  * Adopter des pratiques similaires √† celles du monde du d√©veloppement
* Suivre les conventions d'un langage et adopter une structure lisible de projet

* Adopter une structure de code (niveau micro) et de projet (niveau macro) lisible

::: {.callout-tip}
## En r√©sum√©

Les bonnes pratiques sont le premier pas vers des projets plus √©volutifs, plus fiables et plus simples √† maintenir

:::

## Rappels s√©ance #1 {.nonincremental}

Converger vers ce mod√®le :

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/environment_clean.png)

## Rappels s√©ance #1 {.nonincremental}

Converger vers un mod√®le o√π on distingue :

* [__Code__]{.orange}: stock√© sur `Git`
* [__Configuration__]{.orange}:
    * Environnement logiciel: √† part (cf. s√©ance #4)
    * Variables d'environnement: fichier `.env` √† part, non expos√© gr√¢ce √† `dotenv`
* [__Donn√©es__]{.orange}:
    * Exclues du contr√¥le de version
    * Des formats plus adapt√©s que d'autres


# :four: Traitement des donn√©es volumineuses

## "The obligatory intro slide"

![Source : [motherduck.com](https://motherduck.com/blog/big-data-is-dead/)](img/intro-big-data.png){fig-align="center" height=400}

## Enjeux

- Tendance √† la [**massification**]{.orange} des donn√©es
    - Relatif aux [**capacit√©s de stockage et de traitement**]{.blue2}

. . .

![Source : [AI with Python](https://www.packtpub.com/product/artificial-intelligence-with-python-second-edition/9781839219535)](img/vvv.png){fig-align="center" height=350}

## Choisir des technologies adapt√©es

:one: [**Infrastructures**]{.orange} de donn√©es

. . .

:two: [**Formats**]{.orange} de donn√©es

. . .

:three: [***Frameworks***]{.orange} de traitement de donn√©es

## :one: Infrastructures : historique {.scrollable}

- Historiquement : stockage dans des [**bases de donn√©es**]{.orange}

- 80's : essor des [bases de donn√©es relationnelles](https://fr.wikipedia.org/wiki/Base_de_donn%C3%A9es_relationnelle)
    - Mod√®le de la [***data warehouse***]{.orange}

. . .

![Source : [corporatefinanceinstitute.com](https://corporatefinanceinstitute.com/resources/business-intelligence/data-warehousing/)](img/data-warehouse.png){height="250" fig-align="center"}

## :one: Limite des *data warehouses*

- Peu adapt√©es aux donn√©es *big data*
    - Passage √† l'√©chelle [**co√ªteux**]{.blue2}
    - Limit√©es aux [**donn√©es structur√©es**]{.blue2}

- 2010's : mod√®le du [***data lake***]{.orange}

## :one: Le *data lake* {.scrollable}

- Un stockage [**peu co√ªteux**]{.orange} fait pour des [**donn√©es**]{.orange}
  - [**Volumineuses**]{.blue2}
  - [**Brutes**]{.blue2}
  - Issues de [**sources vari√©es**]{.blue2}

. . .

![Source : [qlik.com](https://www.qlik.com/us/data-lake)](img/datalake.png){height="400" fig-align="center"}

## :one: Le stockage objet

- [**Standard**]{.orange} des *data lakes* dans le [***cloud***]{.orange}
    - Impl√©mentation dominante : [Amazon S3](https://aws.amazon.com/fr/s3/)
    - Impl√©mentation open-source : [MinIO](https://min.io/)

. . .

![Source : [min.io](https://min.io/)](img/minio.svg){height="300" fig-align="center"}

## :two: Formats de donn√©es

::: {.incremental}
- Le choix d'un format de donn√©es r√©pond √† un [**arbitrage**]{.orange} entre plusieurs crit√®res :
    - [**Public cible**]{.blue2}
    - [**Finalit√©**]{.blue2} (traitement, analyse, diffusion)
    - [**Volum√©trie**]{.blue2}
    - [**Interop√©rabilit√©**]{.blue2}
:::

## :two: Limites des formats usuels

- Les [**formats usuels**]{.orange} (`CSV`, `JSON`, `XML`) sont utiles pour :
    - Le traitement de [**faibles volumes**]{.blue2} de donn√©es
    - La [**diffusion**]{.blue2} de donn√©es

- [**Limit√©s**]{.orange} pour le traitement de [**donn√©es volumineuses**]{.orange}
  - [**Non-compress√©s**]{.blue2} : espace disque √©lev√©
  - [**Orient√©s ligne**]{.blue2} : peu adapt√©s aux traitements analytiques

## :two: Orientation ligne vs. orientation colonne {.scrollable}

![Source : [towardsdatascience.com](https://towardsdatascience.com/demystifying-the-parquet-file-format-13adb0206705)](img/row-column.png){height="350" fig-align="center"}

## :two: `Parquet` : propri√©t√©s

- [**Orient√© colonne**]{.orange}
  - Adapt√© aux [**traitements analytiques**]{.blue2}
  - Con√ßu pour √™tre √©crit une fois mais lu fr√©quemment

- [**Optimis√©**]{.orange}
  - [**Compression**]{.blue2} (jusqu'√† 87 % moins d'espace qu'un CSV)
  - [**Lecture**]{.blue2} du fichier (jusqu'√† 34x plus rapide qu'un CSV)

- [**Interop√©rable**]{.orange}
    - Gestion native des [**m√©ta-donn√©es**]{.blue2}

## :two: `Parquet` : partitionnement

- [**Division en blocs**]{.orange} des donn√©es selon un [**crit√®re**]{.orange}
  - [**Optimise la lecture**]{.blue2} pour certaines *queries*

. . .

![Source : [datio.com](https://www.datio.com/iaas/understanding-the-data-partitioning-technique/)](img/partitions.png){fig-align="center"}

## :three: Traitement *in-memory*

- `Parquet` ne r√©sout pas tout
  - L'espace disque est optimis√©
  - Les donn√©es d√©compress√©es doivent [**passer en RAM**]{.blue2}

- Le *framework* adapt√© d√©pend de la [**volum√©trie**]{.orange}

## :three: Donn√©es volumineuses

- Calcul [***larger than memory* optimis√©**]{.blue2}
    - [Arrow](https://arrow.apache.org/overview/) : orientation fichier (`Parquet`)
    - [DuckDB](https://duckdb.org/) : orientation base de donn√©es (`SQL`)

- Autre avantage : [**interop√©rabilit√©**]{.blue2}

. . .

![Source : [Arrow](https://arrow.apache.org/overview/)](img/arrow-interoperability.png){fig-align="center"}

## :three: Donn√©es massives

- Calcul [**distribu√©**]{.blue2} sur un [**cluster**]{.blue2} de machines
    - [Spark](https://spark.apache.org/)

- Base : [**paradigme MapReduce**]{.blue2}

. . .

![Source : [nd.edu](https://www3.nd.edu/~pbui/teaching/cse.30331.fa16/challenge11.html)](img/mapreduce.png){fig-align="center" height="350"}

## En r√©sum√© : pour traiter la volum√©trie

- Utiliser un [**format**]{.orange} de donn√©es adapt√© (`Parquet`)

- Utiliser des [**outils**]{.orange} informatiques adapt√©s
  - Suffisant la plupart du temps : [**calcul *larger than memory* optimis√©**]{.blue2} (`Arrow` / `DuckDB`)
  - Si volum√©trie massive : [**calcul distribu√©**]{.blue2} (`Spark`)

## "Big Data is dead" ?

- Jordan Tigani : [Big Data is dead](https://motherduck.com/blog/big-data-is-dead/)
    - "The big data frontier keeps receding"
    - "Most people don't have that much data"
    - "Most data is rarely queried"

- Plaidoyer pour une [**parcimonie**]{.orange}...
    - ... qui [**facilite la mise en production**]{.blue2} !


# Illustration par la pratique

## Objectif {.nonincremental}

* On part d'un projet n'ayant pas suivi les bonnes pratiques...

![](/drawio/starting_point_nobg.png){width=30%}


## Objectif {.nonincremental}


* ... on finira le semestre avec un projet tr√®s ambitieux

* A l'arriv√©e:

![](/drawio/end_point_nobg.png)


## Objectif {.nonincremental}

* Les premi√®res applications sont les plus chronophages: rendre le projet conforme aux bonnes pratiques
  * Indispensable pour pouvoir progresser plus tard

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/environment_clean.png)


## Et la suite ?

Tout le contenu du cours est disponible est librement accessible sur:

üëâÔ∏è [https://ensae-reproductibilite.github.io/](https://ensae-reproductibilite.github.io)


<!-----------
Prochaine publi

# :five: Portabilit√©

## "It works... on my machine" {.scrollable}

- On a construit un projet [**lisible**]{.orange}, [**structur√©**]{.orange} et [**versionn√©**]{.orange}

- Peut-on [**partager**]{.orange} notre projet ?
    - En th√©orie, oui !
    - En pratique, c'est toujours plus compliqu√©...

. . .

![Source : [simply-the-test.blogspot.com](https://simply-the-test.blogspot.com/2010/05/it-works-on-my-machine.html)](img/IWOMM.jpg){fig-align="center" height=350}

## Le crit√®re de la portabilit√©

- Un code ne vit jamais dans une bulle isol√©e, il contient en g√©n√©ral de nombreuses [**adh√©rences**]{.orange}
    - Des [**d√©pendances**]{.blue2}
    - Des [**librairies syst√®me**]{.blue2}

- Un code est [**portable**]{.orange} s'il peut √™tre ex√©cut√© dans un environnement diff√©rent que celui du d√©veloppement

## Limites du mode de travail usuel

- *Workflow* [**classique**]{.orange}
    - Installer une distribution de `Python` sur son poste
    - D√©velopper un projet en installant les packages n√©cessaires
    - Passer au projet suivant et ainsi de suite

- Quels [**probl√®mes**]{.orange} peuvent se poser ?

## Limites du mode de travail usuel

- [**Conflits de version**]{.orange} : diff√©rents projets peuvent requ√©rir des versions diff√©rentes d'un m√™me *package*

- [**Version de `Python` fixe**]{.orange}, celle de l'installation syst√®me

- [**Reproductibilit√© limit√©e**]{.orange} : difficile de dire quel projet n√©cessite quel package

- [**Portabilit√© limit√©e**]{.orange} : difficile de fixer dans un fichier les d√©pendances sp√©cifiques √† un projet

## Comment favoriser la portabilit√© ?

- Enjeu central pour la [**mise en production**]{.orange}
    - Passer d'un [**environnement de d√©veloppement**]{.blue2} √† un [**environnement de production**]{.blue2}

- Besoin de [**nouveaux outils**]{.orange}
    - Les [**environnements virtuels**]{.blue2}
    - Les [**conteneurs**]{.blue2}

## Environnements virtuels : fonctionnement {.scrollable}

- [**Dossier auto-suffisant**]{.orange} qui :
    - contient un [**intepr√©teur**]{.blue2} `Python` et des [**packages**]{.blue2}
    - est [**isol√©**]{.orange} des autres environnements existants

. . .

![Source : [dataquest.io](https://www.dataquest.io/blog/a-complete-guide-to-python-virtual-environments/)](img/venv.png){fig-align="center" height=350}

## Environnements virtuels : impl√©mentations

- Impl√©mentation standard : [venv](https://docs.python.org/fr/3/library/venv.html)

- Une impl√©mentation populaire en data science : [conda](https://docs.conda.io/en/latest/)
    - √âgalement un *package manager* (comme [pip](https://pip.pypa.io/en/stable/getting-started/), mais multi-langages)

- D'autres impl√©mentations existent : [virtualenv](https://virtualenv.pypa.io/en/latest/), [pyenv](https://github.com/pyenv/pyenv)...

## `venv` : utilisation

- `venv` fait partie de la librairie standard de `Python`

- Utilisation basique (sous `Linux`)
    - [**Cr√©er**]{.orange} un environnement : `python -m venv myenv`
    - [**Activer**]{.orange} l'environnement : `source myenv/bin/activate`
    - [**Installer**]{.orange} des packages : `pip install scikit-learn`
    - [**Quitter**]{.orange} l'environnement : `deactivate`

## Sp√©cifier les d√©pendances

- D√©velopper dans un [**environnement virtuel**]{.orange} favorise :
    - la [**reproductibilit√©**]{.blue2} : fixer les packages utilis√©s et leurs versions
    - la [**portabilit√©**]{.blue2} : distribuer ces sp√©cifications

- [**Convention**]{.orange} : fichier `requirements.txt` √† la [**racine**]{.blue2} du projet (√† *commit* !)
    - [**G√©n√©ration**]{.blue2} : `pip freeze > requirements.txt`
    - [**Installation**]{.blue2} : `pip install -r requirements.txt`

## Le fichier `requirements.txt`

```python
beautifulsoup4==4.12.3
expecttest!=0.2.0
networkx>=3.0.0
numpy
pandas
```

- [**Arbitrage**]{.orange} √† trouver entre :
    - [**Reproductibilit√©**]{.blue2} : [**sp√©cifier**]{.blue2} finement les versions
    - [**S√©curit√©**]{.blue2} : laisser les versions [**√©voluer**]{.blue2}

## Environnements virtuels : limites

- [**Reproductibilit√©**]{.orange} :
    - [**Version de `Python`**]{.blue2} non-g√©r√©e
    - [**Librairies syst√®me**]{.blue2} non-g√©r√©es

- Peu adapt√©s aux environnements de [**production**]{.orange} :
    - Reproductibilit√© limit√©e -> [**portabilit√© limit√©e**]{.blue2}
    - [**Lourdeur**]{.blue2} de gestion des environnements

## Le *gold-standard* de la portabilit√©

- [**Id√©e**]{.orange} : au lieu de distribuer la recette pour recr√©er la bonne machine, peut-on [**distribuer directement la bonne machine**]{.orange} ?
    - On ne peut pas distribuer des [**machines physiques**]{.blue2}
    - Les [**machines virtuelles**]{.blue2} sont [**co√ªteuses**]{.blue2} √† redistribuer

- Les [**conteneurs**]{.orange} offrent le compromis id√©al

## Conteneurs vs. machines virtuelles

![Source : [docker.com](https://www.docker.com/resources/what-container/)](img/docker-vm.png)

## Conteneurs : impl√©mentations

- Plusieurs impl√©mentations des conteneurs
    - [**`Docker`**]{.blue2} est largement pr√©dominant

. . .

![](img/docker.png){fig-align="center" height=200}

## `Docker` : installation

- `Docker` : outil en ligne de commande (CLI)
    - [Instructions](https://docs.docker.com/get-docker/) selon le syst√®me d'exploitation
    - Environnement "bac √† sable" : [Play with Docker](https://labs.play-with-docker.com/)

. . .

![](img/playwithdocker.png){fig-align="center" height=350}

## Le `Dockerfile`

- Exemple : [conteneurisation d'une API avec FastAPI](https://fastapi.tiangolo.com/deployment/docker/)

. . .

```Dockerfile
# Image Docker de base
FROM python:3.11

# D√©finition du r√©pertoire de travail
WORKDIR /code

# Copie des fichiers n√©cessaires sur l'image
COPY requirements.txt /code/requirements.txt

# Installation des d√©pendances
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt && \
    python -m spacy download en_core_web_sm

COPY app/ code/app

# Commande lanc√©e par l'image au runtime
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80", "--proxy-headers"]
```

## `Docker` : fonctionnement

![Source : [k21academy.com](https://k21academy.com/docker-kubernetes/docker-and-kubernetes/)](img/docker-workflow.png){fig-align="center"}

## `Docker` en pratique

- Pr√©sentation d√©taill√©e sur la [page du cours](https://ensae-reproductibilite.github.io/website/chapters/portability.html#les-conteneurs)
    - [**Concepts**]{.blue2} (*caching*, *buildtime/runtime*)
    - [**Commandes**]{.blue2} essentielles
    - [**Application**]{.blue2} √† un exemple concret






# Application

## Portabilit√© du projet

- Consignes sur le [site du cours](https://ensae-reproductibilite.github.io/website/chapters/application.html)
    - Partie :three: : construction d‚Äôun projet [**portable**]{.orange} et [**reproductible**]{.orange}
        - Construire un [**environnement virtuel**]{.blue2} pour le projet
        - [**Conteneuriser**]{.blue2} l'application avec `Docker`







# Partie :two: : mise en production

## Le "mur de la production"

- La majorit√© des projets "*data-driven*" [**ne d√©livrent pas de valeur**]{.blue2} ([1](https://sloanreview.mit.edu/projects/expanding-ais-impact-with-organizational-learning/), [2](https://hdsr.mitpress.mit.edu/pub/2fu65ujf/release/6), [3](https://www.researchgate.net/publication/346647451_Beyond_the_Hype_Why_Do_Data-Driven_Projects_Fail))

- Comment [**d√©passer le stade de l'exp√©rimentation**]{.orange} ?

## Mise en production

- [**Mettre en production**]{.orange} : faire [**vivre**]{.blue2} une application dans l'espace de ses [**utilisateurs**]{.blue2}
    - [**Servir**]{.orange} : [**d√©ployer**]{.blue2} l'application dans un [**format pertinent**]{.blue2} aupr√®s de ses utilisateurs potentiels
    - [**Faire vivre**]{.orange} : g√©rer le [**cycle de vie**]{.blue2} et favoriser l'[**am√©lioration continue**]{.blue2}

- [**Multiples dimensions**]{.orange} : connaissance m√©tier, organisation, infrastructure, outils techniques..

## Favoriser la continuit√©

![Source : [ibm.com](https://public.dhe.ibm.com/software/data/sw-library/analytics/data-science-lifecycle/#model-implementation)](img/exploration-production.png){fig-align="center"}

- [**Comment faire ?**]{.orange}
    - Application des [**bonnes pratiques**]{.blue2} de d√©veloppement
    - Besoin de [**nouveaux concepts et outils**]{.blue2} : [DataOps](https://dataopsmanifesto.org/fr/)

## Le DataOps

- Origine : mouvement [DevOps](https://fr.wikipedia.org/wiki/Devops)

. . .

![Source : [syloe.com](https://www.syloe.com/expert-devops-automatisation-deploiements/)](img/devops.png){fig-align="center" height=300}

- [**DataOps**]{.orange} : construction de [**pipelines de donn√©es**]{.blue2}

- [**MLOps**]{.orange} : d√©ploiement et maintenance de [**mod√®les de ML**]{.blue2}

## Plan de la partie

:six: [**D√©ploiement**]{.blue2}

:seven: [**MLOps**]{.blue2}









# :six: D√©ploiement

## Un sujet large

- Les [**questions essentielles**]{.orange} √† se poser :
    - Quel est le [**format**]{.blue2} adapt√© pour [**valoriser**]{.blue2} le projet ?
    - Quelle [**infrastructure de production**]{.blue2} ?
    - Comment [**automatiser**]{.blue2} le processus de d√©ploiement ?
    - Comment [**suivre**]{.blue2} l'application en production ?

- De [**nombreuses choix possibles**]{.orange}
    - Pr√©sentation des [**concepts et outils standards**]{.blue2}

## Formats de valorisation

- [**Crit√®res**]{.orange} √† prendre en compte :
    - Quels sont les [**utilisateurs**]{.blue2} potentiels ?
    - Quels sont leurs [**besoins**]{.blue2} ?

- [**Exemple**]{.orange} : mise √† disposition d'un [**LLM**]{.orange}

. . .

![Source : [ubuntu.com](https://ubuntu.com/blog/guide-to-ml-model-serving)](img/model-serving.png){fig-align="center" height=250}

## Cas d'usage

- Servir un mod√®le de ML via une API

## Les APIs

> Une API (application programming interface ou ¬´ interface de programmation d‚Äôapplication ¬ª) est une interface logicielle qui permet de ¬´ connecter ¬ª un logiciel ou un service √† un autre logiciel ou service afin d‚Äô√©changer des donn√©es et des fonctionnalit√©s.
>
> [CNIL](https://www.cnil.fr/fr/definition/interface-de-programmation-dapplication-api)

- D√©finition peu informative
    - `Python`, `scikit-learn`, `Docker`, etc. sont des APIs
    - En pratique, on signifie g√©n√©ralement une [**API REST**]{.blue2}

## Les APIs REST

- [**API RESTful**]{.orange} : API conforme au style d'architecture [REST](https://fr.wikipedia.org/wiki/Representational_state_transfer)
    - Communication via le [**protocole HTTP**]{.blue2}

- En pratique :
    - On requ√™te un [**endpoint**]{.blue2} (ex : [l'API de la BAN](https://api-adresse.data.gouv.fr/search/))
    - Avec des [**requ√™tes HTTP**]{.blue2} (`GET`, `POST`, etc.) (ex : [rues contenant "com√©die"](https://api-adresse.data.gouv.fr/search/?q=com√©die&type=street))

## Architecture cible

- Construire une [**API**]{.orange} pour [**servir**]{.orange} le mod√®le
    - [**Interface**]{.blue2} entre [**l'utilisateur**]{.blue2} et le [**mod√®le**]{.blue2} entra√Æn√©

. . .

![](img/api-no-mlflow.png){fig-align="center" height=400}

## Environnement de production

- D√©pend essentiellement de l'infrastructure √† disposition

- [**Propri√©t√©s recherch√©es**]{.orange} :
    - Adapter les ressources ([**scaler**]{.blue2}) selon les besoins
    - D√©ploiements [**reproductibles**]{.blue2} et [**automatis√©s**]{.blue2}
    - [**Monitoring**]{.blue2} de l'√©tat de sant√© des applications

- Solution : utiliser un [**orchestrateur de conteneurs**]{.orange}
    - Base du `SSP Cloud` : [Kubernetes](https://kubernetes.io/fr/)

. . .

![](img/kubernetes-logo.png){fig-align="center" height=100}

## Fonctionnement de Kubernetes

![Source : [DBA Consulting Blog](https://drsalbertspijkers.blogspot.com/2017/06/red-hat-openshift-and-orchestrating.html)](img/kubernetes-archi.png){fig-align="center"  height=400}

## L'approche CI/CD

- [**Int√©gration continue**]{.orange} (CI) : chaque commit d√©clenche un processus "[**test, build and release**]{.blue2}"
    - `GitHub` {{< fa brands github >}} : [GitHub Actions](https://github.com/features/actions)
    - `GitLab` {{< fa brands gitlab >}} : [GitLab CI/CD](https://docs.gitlab.com/ee/ci/)

- [**D√©ploiement continu**]{.orange} (CD) : les nouvelles [**releases**]{.blue2} sont automatiquement d√©ploy√©es
    - Sur le `SSP Cloud` : [ArgoCD](https://argo-cd.readthedocs.io/en/stable/)

## CI : impl√©mentation avec `GitHub Actions`

- [**Principe**]{.orange} : commit -> ex√©cution d'une s√©rie d'√©tapes
    - Script ex√©cut√© sur une VM : [***runner***]{.blue2}
    - Mise √† disposition d'un *output* : [***artifact***]{.blue2}

- [**Multiples outputs possibles**]{.orange}
    - [Image Docker](https://github.com/ensae-reproductibilite/application-correction/blob/appli19b/.github/workflows/prod.yml)
    - [Slides](https://github.com/ensae-reproductibilite/slides/blob/main/.github/workflows/publish.yaml)
    - [Site internet](https://github.com/ensae-reproductibilite/website/blob/main/.github/workflows/publish.yaml)

## CI : anatomie d'un fichier de CI

- Sp√©cification : fichier `.yaml` qui param√©trise le *runner*
    - ‚ö†Ô∏è Situ√© dans le dossier `.github/workflows/`

```{.yaml filename=".github/workflows/ci.yaml"}
name: Build Docker image

on:
  push:
    branches:
      - main
    tags:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ensae-reproductibilite/api-titanic
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
```

## CD : impl√©mentation avec `ArgoCD`

## CD : anatomie d'un fichier de CD

## CI/CD : impl√©mentation sur `Kubernetes`

![](img/ci-cd.png){fig-align="center" height=400}

## Pipeline [***DataOps***]{.orange} complet

- Int√©gration des √©tapes dans un [**pipeline**]{.orange} ([**DAG**]{.blue2})

. . .

![Source : [ubuntu.com](https://ubuntu.com/blog/data-pipelines-overview)](img/data-pipeline.png){fig-align="center" height=300}

- En pratique : utilisation d'un [**orchestrateur**]{.orange}
    - Sur le `SSP Cloud` : [Argo Workflows](https://argoproj.github.io/workflows/)

## Conclusion

- On a construit un pipeline [**reproductible**]{.orange} et [**automatis√©**]{.orange}

. . .

![Source : [ibm.com](https://public.dhe.ibm.com/software/data/sw-library/analytics/data-science-lifecycle/#model-implementation)](img/exploration-production.png){fig-align="center" height=250}

- Comment tenir compte des [**sp√©cificit√©s du ML**]{.orange} ?
    - [**Approche MLOps**]{.blue2}





# Application

## Mise en production

- Consignes sur le [site du cours](https://ensae-reproductibilite.github.io/website/chapters/application.html)
    - Partie :four: : [**automatisation**]{.blue2} de la livraison d'une application avec l‚Äô[**int√©gration continue**]{.blue2}
    - Partie :five: : [**d√©ploiement**]{.blue2} d'une application et [**industrialisation**]{.blue2}






# :seven: MLOps

## Motivation

- Int√©grer :
    - les [**principes DataOps**]{.orange}
    - les [**sp√©cificit√©s**]{.orange} des projets de ML

. . .

![Source : [ml4devs.com](https://www.ml4devs.com/articles/mlops-machine-learning-life-cycle/)](img/mlops.png){fig-align="center" height=400}

## MLOps : principes

- [**Reproductibilit√©**]{.orange}

- [**Contr√¥le de version**]{.orange}

- [**Automatisation**]{.orange}

- [**Collaboration**]{.orange}

- [**Monitoring**]{.orange}

## MLOps : impl√©mentation

- De nombreux [**frameworks**]{.orange} impl√©mentent les principes du MLOps
    - Catalogue du `SSP Cloud` : [MLFlow](https://mlflow.org/)

- Avantages de `MLflow` :
  - [**Open-source**]{.blue2}
  - Couvre l'enti√®ret√© du [**cycle de vie**]{.blue2} d'un mod√®le ML
  - [**Agnostique**]{.blue2} au package ML utilis√©
  - Int√©gration avec `Kubernetes`

## `MLFlow` : vue d'ensemble

![Source : [dzlab.github.io](https://dzlab.github.io/ml/2020/07/12/ml-ci-mlflow/)](img/mlflow-overview.png){fig-align="center" height=350}

## `MLFlow` : Tracking server

- "Une [**API**]{.orange} et une [**interface utilisateur**]{.orange} pour [**enregistrer**]{.orange} les param√®tres, les versions du code, les m√©triques et les artefacts"

. . .

![Source : [Databricks](https://docs.databricks.com/en/mlflow/index.html)](img/mlflow-tracking.png){fig-align="center" height=400}

## `MLFlow` : Models

- "Une convention pour [**'packager'**]{.orange} des [**mod√®les**]{.orange} de *machine learning* sous plusieurs [**formes**]{.orange}"

. . .

![Source : [Dataiku](https://blog.dataiku.com/introducing-mlflow-saved-models)](img/mlflow-models.png){fig-align="center" height=400}

## `MLFlow` : Model registry

- "Un [**entrep√¥t centralis√© de mod√®les**]{.orange}, un ensemble d'API et une interface utilisateur pour g√©rer [**collaborativement**]{.orange}  le cycle de vie complet d'un mod√®le MLflow"

. . .

![Source : [Databricks](https://www.databricks.com/blog/2019/10/17/introducing-the-mlflow-model-registry.html)](img/mlflow-model-registry.png){fig-align="center" height=400}

## Servir le mod√®le (sans `MLFlow`)

![](img/api-no-mlflow.png){fig-align="center"}

## Servir le mod√®le (avec `MLFlow`)

![](img/api-with-mlflow.png){fig-align="center"}

## Suivi du mod√®le

- Pourquoi [**surveiller**]{.orange} un mod√®le en production ?
    - D√©tecter d'√©ventuels [**biais**]{.blue2} des donn√©es d'entra√Ænement
    - D√©tecter une [**instabilit√©**]{.blue2} du mod√®le
    - [**Am√©lioration continue**]{.blue2} du mod√®le

- ‚ö†Ô∏è Le mot [**surveillance**]{.orange} d'une application/mod√®le recouvre des [**r√©alit√©s diff√©rentes**]{.blue2}

## Surveillance selon l'informaticien

- Surveiller une application est partie int√©grante de l'approche [**DevOps**]{.orange}

- Contr√¥le [**technique**]{.orange} de l'API :
    - Latence
    - M√©moire
    - Utilisation disque
    - ...

## Surveillance selon le data scientist

- Surveiller un mod√®le ML est partie int√©grante de l'approche [**MLOps**]{.orange}

- Contr√¥le [**m√©thodologique**]{.orange} du mod√®le

- Performance en [**temps r√©el**]{.orange} du mod√®le souvent impossible, utilisation de proxys :
    - [**Data drift**]{.blue2} : la distribution des donn√©es d'entr√©e change dans le temps
    - [**Concept drift**]{.blue2} : la relation mod√©lis√©e change dans le temps

## Comment surveiller un mod√®le en production ?

- Int√©gration de [**logs**]{.orange} dans l'API

- R√©cup√©ration et mise en forme des logs

- Suivi de [**m√©triques**]{.orange} de ML

- Mise en place d'un syst√®me d'[**alertes**]{.orange}

## R√©sultat : un pipeline reproductible

![Source: [martinfowler.com](martinfowler.com)](img/ML-model-lifecycle.png){fig-align="center"}






# Application

## MLOps

- Consignes sur le [site du cours](https://ensae-reproductibilite.github.io/website/chapters/application.html)
    - Partie :six: : application des [**principes MLOps**]{.blue2} avec `MLFlow`






# Conclusion

- La [**mise en production**]{.orange} met en lumi√®re le [**r√¥le d'interface**]{.orange}
    - De la [***data science***]{.blue2} : statistique et informatique
    - Du [***data scientist***]{.blue2} : √©quipes m√©tier et techniques

- Enjeu : adopter des [**modes d'organisation plus continus**]{.orange}
    - Des [**bonnes pratiques**]{.blue2} √† appliquer [**le plus t√¥t possible**]{.blue2}
    - [**Automatiser**]{.blue2} pour favoriser l'[**am√©lioration continue**]{.blue2}

- ‚ö†Ô∏è Ce cours pr√©sente une [**vision technique**]{.orange} du sujet
    - Les changements n√©cessaires sont plus larges !

----->
