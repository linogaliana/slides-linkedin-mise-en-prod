---
title: Mise en production des projets de data science
subtitle: |
    [Cours de 3e année à l'ENSAE (Séance #5)]{.blue2}<br>
    2024/2025
author:
    - Romain Avouac
    - Lino Galiana
# date:
slide-number: true
footer: |
  Bonnes pratiques pour la mise en production des projets de data science ([retour _homepage_](https://ensae-reproductibilite.github.io/)) [{{< fa brands github >}}](https://github.com/ensae-reproductibilite/)
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
  #onyxia-dark-revealjs:
    incremental: true
    output-file: index.html
controls: true
css: custom.css
from: markdown+emoji
---

## Rappels séance #4 {.nonincremental}

* On a trouvé comment construire une [__reproduction de l'ordinateur qui faisait tourner notre code__]{.blue2}
    * Avec `Docker` {{< fa brands docker >}}

. . .

* On ne va pas demander à chaque utilisateur de notre application de faire tourner ce code

. . .

* Il nous reste à automatiser la livraison de celui-ci

::: {.callout-note}
_Retrouver les slides précédentes sur [ensae-reproductibilite.github.io/slides/](https://ensae-reproductibilite.github.io/slides/)_
:::

# :six: Introduction au format `YAML`

## Qu'est-ce que le format `YAML` ?

- [*YAML Ain't Markup Language*](https://yaml.org/)
    - Langage de [**sérialisation**]{.blue2} de données
    - Structure [**expressive**]{.blue2} mais [**lisible**]{.blue2}

. . .

```yaml
---
source: ambient-it.net
domain:
 - devops
tutorial:
  - yaml:
      name: YAML Ain't Markup Language
      born: 2001
  - json:
      name: JavaScript Object Notation
      born: 2001
  - xml:
      name: Extensible Markup Language
      born: 1996
---
```

## Pourquoi s'intéresser au `YAML` ?

- Outil standard pour les fichiers de [**configuration**]{.orange}
    - [*The rise of the YAML engineer*](https://ep2024.europython.eu/session/the-rise-of-the-yaml-engineer/)

- Simplicité et puissance du [**paradigme déclaratif**]{.orange}
    - On décrit l'[**état final souhaité**]{.blue2}
    - L'implémentation est laissée au [**moteur sous-jacent**]{.blue2}

. . .

```yaml
kind: Pod
metadata:
  name: my-api-pod
spec:
  containers:
  - name: api
    image: my_dh_account/my_fast_api:0.0.1
    env:
    - name: MODEL
      value: deepseek-ai/DeepSeek-R1
```

## `YAML` vs. `JSON`

- `YAML` est un [**superset**]{.orange} de `JSON`
    - Tout fichier `JSON` valide est un fichier `YAML` valide

- Structure basée sur l'[**indentation**]{.orange}
    - Favorise la [**lisibilité**]{.blue2}
    - Plus prône aux [**erreurs**]{.blue2}

. . .

:::{layout-ncol="2"}

```yaml
user:
  name: Alice
  age: 30
```

```json
{
  "user": {
    "name": "Alice",
    "age": 30
  }
}
```

:::

- Convertisseurs : [yaml-to-json](https://jsonformatter.org/yaml-to-json), [json-to-yaml](https://jsonformatter.org/json-to-yaml)

## Caractéristiques d'un fichier `YAML`

- Extension : `.yaml` ou `.yml`

- Structure [**hiérarchique**]{.orange} basée sur des [**paires clé-valeur**]{.orange}

- Différents [**types**]{.blue2} à disposition (numériques, *strings*, booléens, listes)

. . .

```yaml
kind: Pod
metadata:
  name: my-api-pod
spec:
  containers:
  - name: api
    image: my_dh_account/my_fast_api:0.0.1
    env:
    - name: MODEL
      value: deepseek-ai/DeepSeek-R1
    - name: DEBUG
      value: true
    ports:
    - containerPort: 8000
```

## Validation et erreurs fréquentes

- Principale erreur : mauvaise [**indentation**]{.orange}
    - Utiliser [**2 espaces**]{.blue2} (pas de tabulation!)

- Outils de [**validation**]{.orange} :
    - [**Support natif**]{.blue2} dans la plupart des IDE
    - [***Linters***]{.blue2} : [YAMLlint](https://yamllint.com)

## `YAML` et l'approche `GitOps`

- Le [**YAML**]{.orange} est le langage privilégié de l'[**approche GitOps**]{.orange}
    - Les manifestes sont [**déclarés**]{.blue2} en `YAML` (paradigme [**infrastructure as code**]{.blue2})
    - Les manifestes sont [**stockés**]{.blue2} sur un dépôt `Git` (approche [**GitOps**]{.blue2})

- Cette approche a de nombreux avantages :
    - [**Reproductibilité**]{.blue2}
    - [**Traçabilité**]{.blue2}
    - [**Automatisation**]{.blue2}







# :seven: Déploiement

## Un sujet large

- Les [**questions essentielles**]{.orange} à se poser :
    - Quel est le [**format**]{.blue2} adapté pour [**valoriser**]{.blue2} le projet ?
    - Quelle [**infrastructure de production**]{.blue2} ?
    - Comment [**automatiser**]{.blue2} le processus de déploiement ?
    - Comment [**suivre**]{.blue2} l'application en production ?

- De [**nombreuses choix possibles**]{.orange}
    - Présentation des [**concepts et outils standards**]{.blue2}

## Formats de valorisation

- [**Critères**]{.orange} à prendre en compte :
    - Quels sont les [**utilisateurs**]{.blue2} potentiels ?
    - Quels sont leurs [**besoins**]{.blue2} ?

- [**Exemple**]{.orange} : mise à disposition d'un [**LLM**]{.orange}

. . .

![Source : [ubuntu.com](https://ubuntu.com/blog/guide-to-ml-model-serving)](img/model-serving.png){fig-align="center" height=250}

## Cas d'usage

- Servir un modèle de ML via une API

## Les APIs

> Une API (application programming interface ou « interface de programmation d’application ») est une interface logicielle qui permet de « connecter » un logiciel ou un service à un autre logiciel ou service afin d’échanger des données et des fonctionnalités.
>
> [CNIL](https://www.cnil.fr/fr/definition/interface-de-programmation-dapplication-api)

- Définition peu informative
    - `Python`, `scikit-learn`, `Docker`, etc. sont des APIs
    - En pratique, on signifie généralement une [**API REST**]{.blue2}

## Les APIs REST

- [**API RESTful**]{.orange} : API conforme au style d'architecture [REST](https://fr.wikipedia.org/wiki/Representational_state_transfer)
    - Communication via le [**protocole HTTP**]{.blue2}

- En pratique :
    - On requête un [**endpoint**]{.blue2} (ex : [l'API de la BAN](https://api-adresse.data.gouv.fr/search/))
    - Avec des [**requêtes HTTP**]{.blue2} (`GET`, `POST`, etc.) (ex : [rues contenant "comédie"](https://api-adresse.data.gouv.fr/search/?q=comédie&type=street))

## Architecture cible

- Construire une [**API**]{.orange} pour [**servir**]{.orange} le modèle
    - [**Interface**]{.blue2} entre [**l'utilisateur**]{.blue2} et le [**modèle**]{.blue2} entraîné

. . .

![](img/api-no-mlflow.png){fig-align="center" height=400}

## Environnement de production

- Dépend essentiellement de l'infrastructure à disposition

- [**Propriétés recherchées**]{.orange} :
    - Adapter les ressources ([**scaler**]{.blue2}) selon les besoins
    - Déploiements [**reproductibles**]{.blue2} et [**automatisés**]{.blue2}
    - [**Monitoring**]{.blue2} de l'état de santé des applications

- Solution : utiliser un [**orchestrateur de conteneurs**]{.orange}
    - Base du `SSP Cloud` : [Kubernetes](https://kubernetes.io/fr/)

. . .

![](img/kubernetes-logo.png){fig-align="center" height=100}

## Fonctionnement de Kubernetes

![Source : [DBA Consulting Blog](https://drsalbertspijkers.blogspot.com/2017/06/red-hat-openshift-and-orchestrating.html)](img/kubernetes-archi.png){fig-align="center"  height=400}

## L'approche CI/CD

- [**Intégration continue**]{.orange} (CI) : chaque commit déclenche un processus "[**test, build and release**]{.blue2}"
    - `GitHub` {{< fa brands github >}} : [GitHub Actions](https://github.com/features/actions)
    - `GitLab` {{< fa brands gitlab >}} : [GitLab CI/CD](https://docs.gitlab.com/ee/ci/)

- [**Déploiement continu**]{.orange} (CD) : les nouvelles [**releases**]{.blue2} sont automatiquement déployées
    - Sur le `SSP Cloud` : [ArgoCD](https://argo-cd.readthedocs.io/en/stable/)

## CI : implémentation avec `GitHub Actions`

- [**Principe**]{.orange} : commit -> exécution d'une série d'étapes
    - Script exécuté sur une VM : [***runner***]{.blue2}
    - Mise à disposition d'un *output* : [***artifact***]{.blue2}

- [**Multiples outputs possibles**]{.orange}
    - [Image Docker](https://github.com/ensae-reproductibilite/application-correction/blob/appli19b/.github/workflows/prod.yml)
    - [Slides](https://github.com/ensae-reproductibilite/slides/blob/main/.github/workflows/publish.yaml)
    - [Site internet](https://github.com/ensae-reproductibilite/website/blob/main/.github/workflows/publish.yaml)

## CI : anatomie d'un fichier de CI


- Spécification : fichier `.yaml` qui paramétrise le *runner*
    - ⚠️ Situé dans le dossier `.github/workflows/`


:::: {.columns}

::: {.column width="50%"}

```{.yaml filename=".github/workflows/ci.yaml (début)"}
name: Build Docker image

on:
  push:
    branches:
      - main
    tags:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
```

:::

::: {.column width="50%"}

```{.yaml filename=".github/workflows/ci.yaml (fin)"}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ensae-reproductibilite/api-titanic
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
```

:::

::::

## CI/CD : implémentation sur `Kubernetes`

![](img/ci-cd.png){fig-align="center" height=300}

## Pipeline [***DataOps***]{.orange} complet

- Intégration des étapes dans un [**pipeline**]{.orange} ([**DAG**]{.blue2})

. . .

![Source : [ubuntu.com](https://ubuntu.com/blog/data-pipelines-overview)](img/data-pipeline.png){fig-align="center" height=300}

- En pratique : utilisation d'un [**orchestrateur**]{.orange}
    - Sur le `SSP Cloud` : [Argo Workflows](https://argoproj.github.io/workflows/)

## Conclusion

- On a construit un pipeline [**reproductible**]{.orange} et [**automatisé**]{.orange}

. . .

![Source : [ibm.com](https://public.dhe.ibm.com/software/data/sw-library/analytics/data-science-lifecycle/#model-implementation)](img/exploration-production.png){fig-align="center" height=250}

- Comment tenir compte des [**spécificités du ML**]{.orange} ?
    - [**Approche MLOps**]{.blue2}: la semaine prochaine !


# Application

## Mise en production

- Consignes sur le [site du cours](https://ensae-reproductibilite.github.io/website/chapters/application.html)
    - Partie :four: : [**automatisation**]{.blue2} de la livraison d'une application avec l’[**intégration continue**]{.blue2}
    - Partie :five: : [**déploiement**]{.blue2} d'une application et [**industrialisation**]{.blue2}


## Et la suite ?

- Dernière séance sur les enjeux spécifiques au cycle de vie des projets ML (`MLOps`) 🚀

