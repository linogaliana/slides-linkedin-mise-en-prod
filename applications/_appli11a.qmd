:::: {.application}

## Application 11a: environnement virtuel `venv`

1. Exécuter `pip freeze` en ligne de commande et observer la (très) longue
liste de package
2. Créer l'environnement virtuel `titanic` en s'inspirant de [la documentation officielle](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/)[^pythonversion] ou du [chapitre dédié](/chapters/portability.qmd)
3. Utiliser `ls` pour observer et comprendre le contenu du dossier `titanic/bin` installé
4. Activer l'environnement et vérifier l'installation de `Python` maintenant utilisée par votre machine
<!---source titanic/bin/activate && which python---->
5. Vérifier directement depuis la ligne de commande que `Python` exécute bien une commande[^option] avec:

```{.bash filename="terminal"}
python -c "print('Hello')"
```

6. Faire la même chose mais avec `import pandas as pd`
7. Installer les _packages_ à partir du `requirements.txt`. Tester à nouveau `import pandas as pd` pour comprendre la différence.
8. Exécuter `pip freeze` et comprendre la différence avec la situation précédente.
9. Vérifier que le script `main.py` fonctionne bien. Sinon ajouter les _packages_ manquants dans le `requirements.txt` et reprendre de manière itérative à partir de la question 7.
10. Ajouter le dossier `titanic/` au `.gitignore` pour ne pas ajouter ce dossier à `Git`.


<details>
<summary>Aide pour la question 4</summary>

Après l'activation, vous pouvez vérifier quel `python`
est utilisé de cette manière

```{.bash filename="terminal" env="titanic"}
which python
```

</details>

::::

[^pythonversion]: Si vous désirez aussi contrôler la version de `Python`, ce qui peut être important
dans une perspective de portabilité, vous pouvez ajouter une option, par exemple `-p python3.10`. Néanmoins
nous n'allons pas nous embarasser de cette nuance pour la suite car nous pourrons contrôler
la version de `Python` plus finement par le biais de `Docker`.
[^option]: L'option `-c` passée après la commande `python` permet d'indiquer à `Python` que la commande
ne se trouve pas dans un fichier mais sera dans le texte qu'on va directement lui fournir.


{{< checkpoint appli11a >}}

