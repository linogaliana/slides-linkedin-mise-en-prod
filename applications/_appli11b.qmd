:::: {.application}

## Application 11b: environnement `conda`

1. Exécuter `conda env export` en ligne de commande et observer la (très) longue
liste de package
2. Créer un environnement `titanic`
avec [`conda create`](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands)
4. Activer l'environnement et vérifier l'installation de `Python` maintenant utilisée par votre machine
<!---conda activate titanic && which python---->
5. Vérifier directement depuis la ligne de commande que `Python` exécute bien une commande[^option] avec:

```{.bash filename="terminal"}
python -c "print('Hello')"
```

6. Faire la même chose mais avec `import pandas as pd`
7. Installer les _packages_ qu'on avait listé dans le `requirements.txt` précédemment. Ne pas faire un `pip install -r requirements.txt` afin de privilégier `conda install`
8. Exécuter à nouveau `conda env export` et comprendre la différence avec la situation précédente[^splitscreen].
9. Vérifier que le script `main.py` fonctionne bien. Sinon installer les _packages_ manquants
et reprndre de manière itérative
à partir de la question 7.
10. Quand `main.py` fonctionne, faire `conda env export > environment.yml` pour figer l'environnement de travail.

::::

[^splitscreen]: Pour comparer les deux listes, vous pouvez utiliser la fonctionnalité de _split_
du terminal sur `VSCode` pour comparer les outputs de `conda env export` en les mettant
en face à face.


{{< checkpoint appli11b >}}

