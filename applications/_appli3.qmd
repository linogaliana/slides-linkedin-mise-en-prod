::: {.application}
## Application 3a: Param√©trisation du script

1. En s'inspirant de l'exemple ci-dessus üëÜÔ∏è,
cr√©er une variable `n_trees` qui peut √©ventuellement √™tre param√©tr√©e en ligne de commande
et dont la valeur par d√©faut est 20 ;
2. Tester cette param√©trisation en ligne de commande avec la valeur par d√©faut
puis 2, 10 et 50 arbres.
:::

L'exercice suivant permet de mettre en application le fait de param√©triser
un script en utilisant des variables d√©finies dans un fichier YAML.


::: {.application}
## Application 3b: La configuration dans un fichier d√©di√©

1. Installer le package `python-dotenv` que nous allons utiliser pour charger notre jeton d'API √† partir d'une variable d'environnement.
2. A partir de l'exemple de la [documentation](https://pypi.org/project/python-dotenv/), utiliser la fonction `load_dotenv` pour charger dans `Python` nos variables d'environnement √† partir d'un fichier (vous pouvez le cr√©er mais ne pas le remplir encore avec les valeurs voulues, ce sera fait ensuite)
3. Cr√©er la variable et v√©rifier la sortie de `Python` en faisant tourner `titanic.py` en ligne de commande


```{.python filename="titanic.py"}
jeton_api = os.environ.get("JETON_API", "")

if jeton_api.startswith("$"):
    print("API token has been configured properly")
else:
    print("API token has not been configured")
```

4. Maintenant introduire la valeur voulue pour le jeton d'API dans le fichier d'environnement lu par `dotenv`
5. S'il n'existe pas d√©j√†, cr√©er un fichier `.gitignore` (cf. [Chapitre `Git`](/chapters/git.qmd)). Ajouter dans ce fichier `.env` car il ne faut pas committer ce fichier. Au passage ajouter `__pycache__/` au `.gitignore`[^pycache], cela
√©vitera d'avoir √† le faire ult√©rieurement ;
1. Cr√©er un fichier `README.md` o√π vous indiquez qu'il faut cr√©er un fichier `.env` pour
pouvoir utiliser l'API.

[^fileexist]: Ici, le jeton d'API n'est pas indispensable pour que le code
    fonctionne. Afin d'√©viter une erreur non n√©cessaire
    lorsqu'on automatisera le processus, on peut
    cr√©er une condition qui v√©rifie la pr√©sence ou non de ce fichier.
    Le script reste donc reproductible m√™me pour un utilisateur n'ayant pas le fichier
    `secrets.yaml`.

[^pycache]: Il est normal d'avoir des dossiers `__pycache__` qui tra√Ænent en local : ils se cr√©ent automatiquement √† l'ex√©cution d'un script en `Python`. N√©anmoins, il ne faut pas associer ces fichiers √† `Git`, voil√† pourquoi on les ajoute au `.gitignore`.


:::


{{< checkpoint appli3 >}}
